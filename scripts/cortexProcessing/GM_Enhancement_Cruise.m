function GM_Enhancement_Cruise(subjDir, noOfClasses, appDir, lsParams)


outputFilename = ['enhanced_gm_membership_' num2str(noOfClasses) 'classes.nii.gz'];
outputFilename = fullfile(lsParams.resultDir, outputFilename);

if exist(outputFilename, 'file')
  disp('GM_Enhancement_Cruise : ');
  disp(['File : ' outputFilename ' exists, returning']);
  return
end

postDir = ['post' num2str(noOfClasses)];

% ====================================================================== %
% load some data and rois ... 

gmRoiFile = 'gm_membership_roi.nii.gz';
gmRoiFile = fullfile(subjDir, postDir, gmRoiFile);
[gm_membership, header] = loadAnalyze(gmRoiFile, 'Real');

csfRoiFile = 'csf_membership_roi.nii.gz';
csfRoiFile = fullfile(subjDir, postDir, csfRoiFile);
[csf_membership, header] = loadAnalyze(csfRoiFile, 'Real');

imageFile = 'N3Brain_roi.nii.gz';
imageFile = fullfile(subjDir, 'nuCorrected', imageFile);
[imagedata, header] = loadAnalyze(imageFile, 'Grey');

internalLSFile = ['Internal_levelset_Result_' num2str(noOfClasses) 'classes.nii.gz'];
internalLSFile = fullfile(lsParams.resultDir, internalLSFile);
% Previously, the data that was loaded in the next line was assigned to a
% variable called SDF (signed distance function).
[internal_LS_result, header] = loadAnalyze(internalLSFile, 'Real');

% ====================================================================== %
% signed pressure force is generated by favoring the csf tissue

% ratio_csf = 0.9;

SignedPressureForce_GMEnhanced = 1 - lsParams.ratio_csf * csf_membership;

spfGMEnhancedFile = ['SignedPressureForce_GMEnhanced_' num2str(noOfClasses) 'classes.nii.gz'];
spfGMEnhancedFile = fullfile(lsParams.resultDir, spfGMEnhancedFile);
saveAnalyze(SignedPressureForce_GMEnhanced, header, spfGMEnhancedFile, 'Real');
% saveAnalyze(2048*SignedPressureForce_GMEnhanced, header, 'SignedPressureForce_GMEnhanced_rview.hdr', 'Real');

% ====================================================================== %
% perform the internal surface propagation using levelset

% perform the level set propagation
%---------------------------------------------------------------------------
data0 = internal_LS_result;
normalSpeed = SignedPressureForce_GMEnhanced;
% bValue = -0.02;
%
% accuracy = 'medium';
% tMax_ReIntialize = 1.5;
% errorMax = 0.001;
%
% resultDir = 'levelset_medium_ReInitialization_GM_Enhancement2';
%
% tMax = 8;                   % End time.
% plotSteps = 20;              % How many intermediate plots to produce?
%
% factorCFL = 0.1;
%
% prefix = 'GM_Enhanced';
%--------------------------------------------------------------------------

[grid, TTR] = levelSet_GM_Enhancement(noOfClasses, imagedata, header, normalSpeed, data0, lsParams);

%--------------------------------------------------------------------------
% detect shock points and modifiy the gm membership

% shockThreshold = 0.8;
[shockpoints, shockvalues, shocks] = ...
  getShockPoints(grid, TTR, SignedPressureForce_GMEnhanced, internal_LS_result, lsParams.shockThreshold);

shockVolume = zeros(size(csf_membership), 'uint32');
shockVolume(shockpoints(:)) = 1;

inds = find(gm_membership < 0.8);
shockVolume(inds) = 0;

shockVolFilename = ['shockVolume_' num2str(noOfClasses) 'classes.nii.gz'];
shockVolFilename = fullfile(lsParams.resultDir, shockVolFilename);
saveAnalyze(shockVolume, header, shockVolFilename, 'Grey');

shocksFilename = ['shocks_' num2str(noOfClasses) 'classes.nii.gz'];
shocksFilename = fullfile(lsParams.resultDir, shocksFilename);
saveAnalyze(shocks, header, shocksFilename, 'Real');

%--------------------------
% filter the small noises from the shockVolume
volumeThreshold = 20;
label = 1;
[label3D, largestComponent] = regionVolumeFilter_GMEnhanced(shockVolume, header, volumeThreshold, label);

filteredShockVolFile = ['filtered_shockVolume_' num2str(noOfClasses) 'classes.nii.gz'];
filteredShockVolFile = fullfile(lsParams.resultDir, filteredShockVolFile);
saveAnalyze(uint32(label3D), header, filteredShockVolFile, 'Grey');

% perform the 3D thinning
object_C = 18;
background_C = 6;
[skeletonpoints, skeletonvolume] = thinning3D_filter(label3D, lsParams.tp);

skeletonFile = ['skeletonvolume_' num2str(noOfClasses) 'classes.nii.gz'];
skeletonFile = fullfile(lsParams.resultDir, skeletonFile);
saveAnalyze(uint32(skeletonvolume), header, skeletonFile, 'Grey');

%--------------------------

% skeletonpoints
skeletonvalues = shocks(skeletonpoints);

enhanced_gm_membership = gm_membership;
% enhanced_gm_membership(shockpoints) = 0.5 - abs(0.5-gm_membership(shockpoints) .* shockvalues);

enhanced_gm_membership(skeletonpoints) = 0.5 - abs(0.5 - gm_membership(skeletonpoints) .* skeletonvalues);
% enhanced_gm_membership(shockpoints) = gm_membership(shockpoints) .* shockvalues;

saveAnalyze(enhanced_gm_membership, header, outputFilename, 'Real');

% save GM_Enhanced

return
%-------------------------------------------------------------------------



    